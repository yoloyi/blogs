<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 余农场主</title><link>//blog.yoloyi.com/posts/</link><description>Recent content in Posts on 余农场主</description><generator>Hugo -- gohugo.io</generator><language>zh</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0800</lastBuildDate><atom:link href="//blog.yoloyi.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>一、命令备忘录 - Cheat</title><link>//blog.yoloyi.com/2019/12/29/how-to-use-cheat/</link><pubDate>Sun, 29 Dec 2019 00:00:00 +0800</pubDate><guid>//blog.yoloyi.com/2019/12/29/how-to-use-cheat/</guid><description/></item><item><title>如何在本地环境安装管理多个 Golang 版本</title><link>//blog.yoloyi.com/2019/12/17/local-go-version-like-node-n/</link><pubDate>Tue, 17 Dec 2019 00:00:00 +0800</pubDate><guid>//blog.yoloyi.com/2019/12/17/local-go-version-like-node-n/</guid><description>如何在本地环境管理多个 Golang 版本 在同一台计算机上安装多个Go版本可能很有用，以确保软件包的测试可以通过多个Go版本。一旦安装了一个Go版本，就可以如下安装另一个版本
前提需要在本地环境已经安装了一个 Golang 的版本
如何安装其他版本 例如，我们本机环境是 1.13，我们需要下载1.12的版本
1 2 $ go get golang.org/dl/go1.12.14 $ go1.12.14 download 等待安装结束后，以上就在本地使用的 go 1.12.14 版本
如何使用？ 与你本地使用的 go 一样，不过在go 后面接上版本号，例如上面的例子
1 $ go1.12.14 env 如果你要安装其他版本的，你可以看官方版本下有的版本。 随着更换版本即可
如何卸载 $ go get golang.org/dl/go1.12.14
这个命令 会在你的家目录下面 生成一个 sdk/go1.12.14 文件，这个地方就是你的 go1.12.14 的 GOROOT
删除 go1.12.14 即可
然后删除你本机 GOBIN 里面的 go1.12.14 就可以。</description></item><item><title>软件工程概述</title><link>//blog.yoloyi.com/2019/12/17/ruanjian-gongcheng/</link><pubDate>Tue, 17 Dec 2019 00:00:00 +0800</pubDate><guid>//blog.yoloyi.com/2019/12/17/ruanjian-gongcheng/</guid><description>软件工程概述 从工程学的角度人事软件在大型系统中的设计和应用，让软件工程师具有从事工程实践所需的专业能力。
需求定义和分析 权衡和选择技术方案 使用 UML 建模 开发 高质量 的软件 运用软件工程工具 团队协作开发 谈判与沟通 为什么要学软件工程？ 对软件开发的认识：程序 -&amp;gt; 系统
对程序员的认识：程序员 -&amp;gt; 软件工程师
软件工程的产生与发展 软件无处不在，为我们生活创造了无限的精彩。在当今的信息时代，世界变得更加 “智辉”，万事万物间感知化、互联化和智能化的成都不断加深。 软件工程为这一切做出了巨大的贡献，随着该学科的成熟与发展，其未来的贡献将不可限量。 在软件工程早期是一门课，连专业方向也算不上，经过软件的日益发展，现在成为了一门独立的学科。 软件工程的未来，还会发展的更快，未来会想着万物互联、感知、智能的方向发展。
软件的发展历史 1949 ~ 1959 独立变成服务 代表：CSC
特点：为单个客户提供定制软件，包扩技术咨询、软件编程、和维护；软件的销售是一次性的。
这个时期的软件都是跟着硬件搭配的，比如我买个机器，它要干活，他就要相应的软件来搭配，比如我们的机器要一个科学计算的功能，我们就要找人定制一个科学计算的软件。希望做其他的，我们就定制其他的软件。
1959 ~ 1969 软件产品 代表：Informatics
特点：保护知识产权以许可证的方式销售软件
有一群人也就是做这个定制化软件的服务，这个定制化（外包）的公司在为多个公司服务的过程中就发现，多家公司有类似的功能，所以他们把同样的功能，抽离出来做成一个面向收费的项目。
1969 ~ 1981 企业级解决方案 代表：Oracle
特点：面向领域，以企业解决方案供应商面目出现
1981 ~ 1991 面向大众的套件 代表：Microsoft
特点：基于个人计算服务大众市场
Microsoft 做出来 PC 机后，就有了个人使用 PC 机。这样 Microsoft 创出来了一个面向个人的商业模式。</description></item><item><title>ElasticSearch Api 使用</title><link>//blog.yoloyi.com/2019/12/13/elasticsearch-1/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0800</pubDate><guid>//blog.yoloyi.com/2019/12/13/elasticsearch-1/</guid><description>使用 ElasticSearch Api ElasticSearch API 遵守 Restful 标准
请求方式 解释 GET 查询数据 POST 新增数据 PUT 修改数据 DELETE 删除数据 1、新增数据 1 2 3 4 curl -X POST &amp;#34;localhost:9200/customer/_doc?pretty&amp;#34; -H &amp;#39;Content-Type: application/json&amp;#39; -d&amp;#39; { &amp;#34;name&amp;#34;: &amp;#34;John Doe&amp;#34; }&amp;#39; pretty 参数作用是美化返回参数
返回结果
1 2 3 4 5 6 7 8 9 10 11 12 13 14 { &amp;#34;_index&amp;#34; : &amp;#34;customer&amp;#34;, &amp;#34;_type&amp;#34; : &amp;#34;_doc&amp;#34;, &amp;#34;_id&amp;#34; : &amp;#34;J1c2PW8BlcDBxKe0QGUz&amp;#34;, // 这个 ID 会变化。ES UUID &amp;#34;_version&amp;#34; : 1, &amp;#34;result&amp;#34; : &amp;#34;created&amp;#34;, &amp;#34;_shards&amp;#34; : { &amp;#34;total&amp;#34; : 2, &amp;#34;successful&amp;#34; : 1, &amp;#34;failed&amp;#34; : 0 }, &amp;#34;_seq_no&amp;#34; : 9, &amp;#34;_primary_term&amp;#34; : 1 } 2、查询一条数据 1 curl -X GET &amp;#34;localhost:9200/customer/_doc/J1c2PW8BlcDBxKe0QGUz?</description></item><item><title>Go语言 简单实用 GRP</title><link>//blog.yoloyi.com/2019/12/13/go-use-grpc/</link><pubDate>Fri, 13 Dec 2019 00:00:00 +0800</pubDate><guid>//blog.yoloyi.com/2019/12/13/go-use-grpc/</guid><description>Golang Grpc 例子 GitHub源码地址
如何运行 helloworld 例子 helloworld 1、$ git clone git@github.com:yoloyi/go-exercise-example.git
2、$ cd /go-exercise-example/grpc
3、$ go install
4、$ go run helloworld/cmd/service/main.go
5、$ go run helloworld/cmd/client/main.go world
例子学习 protoc 是 Protocol Buffers 的一个工具，负责生成协议的序列化、反序列化相应语言的代码
1、下载 protoc
1 https://github.com/protocolbuffers/protobuf/releases 选择对应的本机的环境，下载相应的 protoc
2、把bin/protoc 移动到 PATH 目录下
1 mv bin/protoc /usr/local/bin 3、检查 protoc 是否正确移动
1 which protoc Golang 1、安装 grpc
1 go get -u google.</description></item><item><title>两数之和</title><link>//blog.yoloyi.com/2019/08/02/2019-09-18-two-sum/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-09-18-two-sum/</guid><description/></item><item><title>删除排序链表中的重复元素</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-83/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-83/</guid><description/></item><item><title>整数反转</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-7/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-7/</guid><description/></item><item><title>查询后的偶数和</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-cha-xun-hou-ou-shu-he/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-cha-xun-hou-ou-shu-he/</guid><description/></item><item><title>环形链表</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-141/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-141/</guid><description/></item><item><title>重复 N 次的元素</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-961/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-961/</guid><description/></item><item><title>链表的中间结点</title><link>//blog.yoloyi.com/2019/08/02/2019-08-05-876/</link><pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate><guid>//blog.yoloyi.com/2019/08/02/2019-08-05-876/</guid><description/></item></channel></rss>